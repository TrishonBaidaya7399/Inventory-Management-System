// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  items       Item[]     @relation("CategoryItems")
}

model TransferStock {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  stockAmount       Int
  senderWarehouse   Warehouse  @relation("SenderWarehouse", fields: [senderWarehouseId], references: [id])
  senderWarehouseId String     @db.ObjectId
  receiverWarehouse Warehouse  @relation("ReceiverWarehouse", fields: [receiverWarehouseId], references: [id])
  receiverWarehouseId String   @db.ObjectId
  note              String?
}

model AddStock {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  stockAmount  Int
  warehouse    Warehouse  @relation(fields: [warehouseId], references: [id], name: "WarehouseToAddStocks")
  warehouseId  String     @db.ObjectId
  note         String?
}

model Unit {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  abbreviation  String
  items         Item[]     @relation("UnitItems")
}

model Brand {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  logo     String[]
  items    Item[]     @relation("BrandItems")
}

model Warehouse {
  id                     String          @id @default(auto()) @map("_id") @db.ObjectId
  title                  String
  location               String?
  description            String?
  warehouseType          String
  items                  Item[]          @relation("WarehouseItems")
  addStocks              AddStock[]      @relation("WarehouseToAddStocks")
  transferStocksSent     TransferStock[] @relation("SenderWarehouse")
  transferStocksReceived TransferStock[] @relation("ReceiverWarehouse")
}

model Supplier {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  phone           String?
  email           String?
  address         String?
  contactPerson   String?
  supplierCode    String    @unique
  paymentTerms    String?
  taxID           String?
  notes           String?
  items           Item[]     @relation("SupplierItems")
}

model Post {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String    @db.ObjectId
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  posts Post[]
}

model YourModel {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  category      Category   @relation(fields: [categoryId], references: [id], name: "CategoryItems")
  categoryId    String     @db.ObjectId
  sku           String     @unique
  quantity      Int
  unit          Unit       @relation(fields: [unitId], references: [id], name: "UnitItems")
  unitId        String     @db.ObjectId
  brand         Brand      @relation(fields: [brandId], references: [id], name: "BrandItems")
  brandId       String     @db.ObjectId
  unitPrice     Float
  costPrice     Float
  supplier      Supplier   @relation(fields: [supplierId], references: [id], name: "SupplierItems")
  supplierId    String     @db.ObjectId
  reorderUnit   Int
  warehouse     Warehouse  @relation(fields: [warehouseId], references: [id], name: "WarehouseItems")
  warehouseId   String     @db.ObjectId
  barcode       String?
  dimensions    String?
  weight        Float?
  description   String?
  images        String[]
  note          String?
}
